--You’re helping a bank automate operations for a small savings account system.
--The bank needs to:
--• Track customer accounts
--• Allow deposits and withdrawals
--• Prevent overdrawing
--• Log each transaction
--Task 1: Create Table bank_accounts
--Design a table with:
--account_number (VARCHAR2(20)) – Primary Key
--account_name (VARCHAR2(100))
--balance (NUMBER(10,2))
--Insert two sample accounts:
--'ACC001', 'Alice Martins', balance: 5000.00
--'ACC002', 'John Peters', balance: 3000.00

CREATE SEQUENCE BANK_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE


CREATE TABLE BANK_ACCOUNTS(
CUSTOMER_ID NUMBER,
ACCOUNT_NUMBER VARCHAR2(20),
ACCOUNT_NAME VARCHAR2(100),
BALANCE NUMBER(10,2),
CONSTRAINT PK_CUST_ACCT PRIMARY KEY(CUSTOMER_ID)
);

INSERT INTO BANK_ACCOUNTS(CUSTOMER_ID, ACCOUNT_NUMBER, ACCOUNT_NAME, BALANCE)
VALUES(BANK_SEQ.NEXTVAL, 'ACC001', 'ALICE MARTINS', 5000.00);

INSERT INTO BANK_ACCOUNTS(CUSTOMER_ID, ACCOUNT_NUMBER, ACCOUNT_NAME, BALANCE)
VALUES(BANK_SEQ.NEXTVAL, 'ACC002', 'JOHN PETERS', 3000.00);

--SELECT * FROM BANK_ACCOUNTS


--Task 2: Write Procedure make_deposit
--Create a procedure that:
--Inputs: p_account_number IN VARCHAR2, p_amount IN NUMBER
--Action: Adds the amount to the account’s balance
--• Validations:
--• Account must exist
--• Amount must be positive
--• Outputs: Use DBMS_OUTPUT to confirm deposit or show error


CREATE OR REPLACE PROCEDURE MAKE_DEPOSIT(p_account_number IN VARCHAR2, p_amount IN NUMBER)
AS

V_COUNT NUMBER;
--V_ACCOUNT_NUMBER VARCHAR2(50);
--V_AMOUNT NUMBER(10,2);


BEGIN

SELECT COUNT(*) INTO  V_COUNT FROM BANK_ACCOUNTS
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER;
--AND AMOUNT = P_AMOUNT;

IF V_COUNT > 0 THEN
UPDATE BANK_ACCOUNTS
SET BALANCE = BALANCE + P_AMOUNT
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER;
END IF;

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ACCOUNT DOES NOT EXIST' || SQLERRM);
END;
/




DECLARE 

V_ACCOUNT_NUMBER VARCHAR2(100);
V_AMOUNT NUMBER(10,2);

BEGIN

V_ACCOUNT_NUMBER := '&V_ACCOUNT_NUMBER';
V_AMOUNT := '&V_AMOUNT';

MAKE_DEPOSIT(V_account_number, V_amount);

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT! TRY AGAIN');
END;
/

--SELECT * FROM BANK_ACCOUNTS

--Task 3: Write Procedure make_withdrawal
--Create a procedure that:
--• Inputs: p_account_number IN VARCHAR2, p_amount IN NUMBER
--• Action: Deducts amount from balance
--• Validations:
--• Account must exist
--• Cannot withdraw more than balance
--• Exception Handling:
--• Show “Insufficient Funds” message if withdrawal exceeds balance
--• Show “Invalid Account” if not found


CREATE OR REPLACE PROCEDURE MAKE_WITHDRAWAL (p_account_number IN VARCHAR2, p_amount IN NUMBER)

AS

V_COUNT NUMBER;


BEGIN

SELECT COUNT(*)INTO V_COUNT FROM BANK_ACCOUNTS 
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER
AND BALANCE > 1000;


IF V_COUNT > 0 THEN
UPDATE BANK_ACCOUNTS
SET BALANCE = BALANCE - P_AMOUNT
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER;
END IF;

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ACCOUNT DOES NOT EXIST' || SQLERRM);
END;
/


DECLARE 

V_ACCOUNT_NUMBER VARCHAR2(100);
V_AMOUNT NUMBER(10,2);

BEGIN

V_ACCOUNT_NUMBER := '&V_ACCOUNT_NUMBER';
V_AMOUNT := '&V_AMOUNT';

MAKE_WITHDRAWAL(V_account_number, V_amount);

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT! TRY AGAIN');
END;
/

--SELECT * FROM BANK_ACCOUNTS;

--Task 4: Create Table transaction_log
--Log all deposits and withdrawals:
--• log_id (Primary Key, use a sequence)
--• account_number
--• transaction_type (DEPOSIT or WITHDRAWAL)
--• amount
--• transaction_time (use SYSDATE)
--Modify make_deposit and make_withdrawal to insert into this table after each
--successful operation.


CREATE SEQUENCE LOG_SEQ
START WITH 1
INCREMENT BY 1
NOCYCLE
NOCACHE

CREATE TABLE TRANSACTION_LOG(
LOG_ID NUMBER ,
ACCOUNT_NUMBER VARCHAR2(20),
TRANSACTION_TYPE VARCHAR2(50),
AMOUNT NUMBER,
TRANSACTION_TIME DATE,

CONSTRAINTS PK_TRANS_LOG PRIMARY KEY(LOG_ID)

);
--CONSTRAINT FK_ACCT_LOG FOREIGN KEY (ACCOUNT_NUMBER)
--REFERENCES BANK_ACCOUNTS(ACCOUNT_NUMBER)


CREATE OR REPLACE PROCEDURE MAKE_DEPOSIT_LOG(p_account_number IN VARCHAR2, p_amount IN NUMBER, P_LOG OUT VARCHAR2)
AS

V_COUNT NUMBER;
V_LOG VARCHAR2(100);
--V_ACCOUNT_NUMBER VARCHAR2(50);
--V_AMOUNT NUMBER(10,2);


BEGIN

--SELECT COUNT(*) INTO  V_COUNT FROM BANK_ACCOUNTS
--WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER;
----AND AMOUNT = P_AMOUNT;


INSERT INTO BANK_ACCOUNT(LOG_ID, ACCOUNT_NUMBER, TRANSACTION_TYPE, AMOUNT, TRANSACTION_TIME)VALUES
(LOG_SEQ.NEXTVAL, NULL, 'SAVINGS', NULL, SYSDATE);


SELECT COUNT(*) INTO V_COUNT FROM BANK_ACCOUNTS 
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER);
 
IF V_COUNT > 0
THEN
UPDATE BANK_ACCOUNTS
SET BALANCE = BALANCE + P_AMOUNT
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER;

V_LOG := V_LOG||'ACCOUNT_NUMBER: '|| P_ACCOUNT_NUMBER|| 'SUCCESSFULLY UPDATED';

END IF;

P_LOG := V_LOG;

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ACCOUNT DOES NOT EXIST' || SQLERRM);
END;
/




DECLARE 

V_ACCOUNT_NUMBER VARCHAR2(100);
V_AMOUNT NUMBER(10,2);
V_LOG VARCHAR2(100);

BEGIN

V_ACCOUNT_NUMBER := '&V_ACCOUNT_NUMBER';
V_AMOUNT := '&V_AMOUNT';


MAKE_DEPOSIT_LOG(V_account_number, V_amount, V_LOG);

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT! TRY AGAIN');
END;
/

--SELECT * FROM TRANSACTION_LOG
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE MAKE_WITHDRAWAL_LOG (p_account_number IN VARCHAR2, p_amount IN NUMBER, P_LOG OUT VARCHAR2)

AS

V_COUNT NUMBER;
V_LOG VARCHAR2(100);


BEGIN

INSERT INTO BANK_ACCOUNTS(LOG_ID, ACCOUNT_NUMBER, TRANSACTION_TYPE, AMOUNT, TRANSACTION_TIME)VALUES
(LOG_SEQ.NEXTVAL, NULL, 'SAVINGS', NULL, SYSDATE);



SELECT COUNT (*) INTO V_COUNT FROM BANK_ACCOUNTS 
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER
AND BALANCE > 1000;
  
IF V_COUNT > 0 THEN
UPDATE BANK_ACCOUNTS
SET BALANCE = BALANCE + P_AMOUNT, ACCOUNT_NUMBER = P_ACCOUNT_NUMBER
WHERE ACCOUNT_NUMBER = P_ACCOUNT_NUMBER;


V_LOG := V_LOG||'ACCOUNT_NUMBER: '|| P_ACCOUNT_NUMBER|| 'SUCCESSFULLY UPDATED';

ELSE 

V_LOG := V_LOG||'ACCOUNT_NUMBER: '|| P_ACCOUNT_NUMBER|| 'INSUFFICIENT FUNDS';

END IF;


P_LOG := V_LOG;

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ACCOUNT DOES NOT EXIST' || SQLERRM);
END;
/



DECLARE 

V_ACCOUNT_NUMBER VARCHAR2(100);
V_AMOUNT NUMBER(10,2);

BEGIN

V_ACCOUNT_NUMBER := '&V_ACCOUNT_NUMBER';
V_AMOUNT := '&V_AMOUNT';
V_LOG VARCHAR2(100);

MAKE_WITHDRAWAL(V_account_number, V_amount, V_LOG);

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INVALID INPUT! TRY AGAIN');
END;
/


--Task 5: Write Anonymous Block
--Simulate:
--• Deposit of 1000 to 'ACC001'
--• Withdrawal of 2000 from 'ACC002'
--• Withdrawal of 5000 from 'ACC002' (should fail with “Insufficient
--Funds”)


DECLARE 
V_ACCOUNT_NUMBER VARCHAR2(100);
V_AMOUNT NUMBER;
V_LOG VARCHAR2(100)

BEGIN

MAKE_DEPOSIT(ACC001, 1000);
MAKE_WITHDRAWAL(ACC002, 2000);
MAKE_WITHDRAWAL_LOG(ACC002, 5000,V_LOG )

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

--Task 6: push to GitHub


